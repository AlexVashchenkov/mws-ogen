// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// AddUser implements addUser operation.
	//
	// Adding user to the storage.
	//
	// POST /user
	AddUser(ctx context.Context, req *User) (AddUserRes, error)
	// DeleteUser implements deleteUser operation.
	//
	// Delete an existing User in storage.
	//
	// DELETE /user/{userId}
	DeleteUser(ctx context.Context, params DeleteUserParams) (DeleteUserRes, error)
	// GetUser implements getUser operation.
	//
	// Get a User by its ID.
	//
	// GET /user/{userId}
	GetUser(ctx context.Context, params GetUserParams) (GetUserRes, error)
	// ListUsers implements listUsers operation.
	//
	// Get all Users from the storage.
	//
	// GET /user
	ListUsers(ctx context.Context) (ListUsersRes, error)
	// UpdateUser implements updateUser operation.
	//
	// Update an existing User in storage.
	//
	// POST /user/{userId}
	UpdateUser(ctx context.Context, req *User, params UpdateUserParams) (UpdateUserRes, error)
	// NewError creates *ErrRespStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *ErrRespStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
